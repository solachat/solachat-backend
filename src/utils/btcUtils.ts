import axios from "axios";

const BLOCKCYPHER_API = "https://api.blockcypher.com/v1/btc/test3"; // –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å BTC
const BLOCKCYPHER_TOKEN = "ee5134e2c2ae4dd4a53ac7de8381a1a2"; // –¢–≤–æ–π API-—Ç–æ–∫–µ–Ω

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ BTC-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ BlockCypher API
async function generateNewAddress() {
    try {
        const response = await axios.post(`${BLOCKCYPHER_API}/addrs?token=${BLOCKCYPHER_TOKEN}`);
        const { address, private: privateKey } = response.data;

        console.log("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π BTC-–∞–¥—Ä–µ—Å:", address);
        return { address, privateKey };
    } catch (error: unknown) {
        const err = error as any; // üìå –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º `error` –∫ `any`
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BTC-–∞–¥—Ä–µ—Å–∞:", err.response?.data || err.message || err);
        throw new Error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BTC-–∞–¥—Ä–µ—Å–∞");
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ BTC —á–µ—Ä–µ–∑ BlockCypher API
async function sendBTC(fromPrivateKey: string, toAddress: string, amount: number) {
    try {
        console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} BTC –Ω–∞ ${toAddress}`);

        const response = await axios.post(`${BLOCKCYPHER_API}/txs/micro?token=${BLOCKCYPHER_TOKEN}`, {
            from_private: fromPrivateKey,
            to: toAddress,
            value: amount * 100000000, // BTC ‚Üí Satoshis
        });

        console.log("‚úÖ BTC —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", response.data);
        return response.data;
    } catch (error: unknown) {
        const err = error as any; // üìå –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º `error` –∫ `any`
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ BTC:", err.response?.data || err.message || err);
        throw new Error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ BTC");
    }
}

export { generateNewAddress, sendBTC };
