import axios from "axios";

const BLOCKCYPHER_API = "https://api.blockcypher.com/v1/eth/main"; // Ethereum Mainnet API
const BLOCKCYPHER_TOKEN = "ee5134e2c2ae4dd4a53ac7de8381a1a2"; // –¢–≤–æ–π API-—Ç–æ–∫–µ–Ω
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const MAIN_WALLET = process.env.MAIN_WALLET; // –ê–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –º–∏–∫—Å–µ—Ä–∞

if (!PRIVATE_KEY || !MAIN_WALLET) {
    throw new Error("‚ùå –û—à–∏–±–∫–∞: PRIVATE_KEY –∏–ª–∏ MAIN_WALLET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
}

// **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ETH-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ BlockCypher API**
async function generateDepositAddress() {
    try {
        const response = await axios.post(`${BLOCKCYPHER_API}/addrs?token=${BLOCKCYPHER_TOKEN}`);
        const { address, private: privateKey } = response.data;

        console.log("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ETH-–∞–¥—Ä–µ—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:", address);
        return { address, privateKey };
    } catch (error: unknown) {
        const err = error as any;
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ETH-–∞–¥—Ä–µ—Å–∞:", err.response?.data || err.message || err);
        throw new Error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ETH-–∞–¥—Ä–µ—Å–∞");
    }
}

// **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –Ω–∞ –∞–¥—Ä–µ—Å –º–∏–∫—Å–µ—Ä–∞**
async function checkDeposits() {
    try {
        const response = await axios.get(`${BLOCKCYPHER_API}/addrs/${MAIN_WALLET}/balance?token=${BLOCKCYPHER_TOKEN}`);
        const balanceETH = response.data.balance / 10 ** 18;

        console.log(`üîç –ë–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: ${balanceETH} ETH`);

        if (balanceETH > 0.01) {
            console.log(`‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ ${balanceETH} ETH. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Å–µ—Ä...`);
            return balanceETH;
        }
        return 0;
    } catch (error: unknown) {
        const err = error as any;
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞:", err.response?.data || err.message || err);
        throw new Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞");
    }
}

export { generateDepositAddress, checkDeposits };
