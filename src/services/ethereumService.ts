import axios from "axios";

const BLOCKCYPHER_API = "https://api.blockcypher.com/v1/eth/main"; // Ethereum Mainnet API
const BLOCKCYPHER_TOKEN = "ee5134e2c2ae4dd4a53ac7de8381a1a2"; // –¢–≤–æ–π API-—Ç–æ–∫–µ–Ω

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ ETH-–∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ BlockCypher API
async function generateTemporaryWallet() {
    try {
        const response = await axios.post(`${BLOCKCYPHER_API}/addrs?token=${BLOCKCYPHER_TOKEN}`);
        const { address, private: privateKey } = response.data;

        console.log("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π ETH-–∞–¥—Ä–µ—Å:", address);
        return { address, privateKey };
    } catch (error: unknown) {
        const err = error as any;
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ETH-–∞–¥—Ä–µ—Å–∞:", err.response?.data || err.message || err);
        throw new Error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ETH-–∞–¥—Ä–µ—Å–∞");
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ ETH —á–µ—Ä–µ–∑ BlockCypher API
async function sendThroughMixer(userAddress: string, amount: number) {
    try {
        const tempWallet = await generateTemporaryWallet();

        console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount} ETH –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å ${tempWallet.address}`);

        // 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ETH –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
        const response1 = await axios.post(`${BLOCKCYPHER_API}/txs/new?token=${BLOCKCYPHER_TOKEN}`, {
            inputs: [{ addresses: ["YOUR_MAIN_WALLET_ADDRESS"] }], // –¢—É—Ç —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª—ë–∫
            outputs: [{ addresses: [tempWallet.address], value: amount * 10 ** 18 }]
        });

        console.log("‚úÖ ETH –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:", response1.data);

        // 2Ô∏è‚É£ –ñ–¥—ë–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ETH –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
        setTimeout(async () => {
            console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amount * 0.99} ETH –Ω–∞ ${userAddress}`);

            const response2 = await axios.post(`${BLOCKCYPHER_API}/txs/new?token=${BLOCKCYPHER_TOKEN}`, {
                inputs: [{ addresses: [tempWallet.address] }],
                outputs: [{ addresses: [userAddress], value: amount * 0.99 * 10 ** 18 }]
            });

            console.log("‚úÖ ETH –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", response2.data);
        }, Math.random() * 10000);
    } catch (error: unknown) {
        const err = error as any;
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ETH:", err.response?.data || err.message || err);
        throw new Error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH");
    }
}

export { sendThroughMixer };
