import User from './User';
import Chat from './Chat';
import Message from './Message';
import File from './File';
import UserChats from './UserChats';
import Session from "./Session";

export const defineAssociations = () => {
    // üîπ –°–≤—è–∑—å "–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º" (–ß–∞—Ç ‚Üî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    Chat.belongsToMany(User, {
        through: UserChats,
        foreignKey: 'chatId',
        as: 'users',
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE',
    });

    User.belongsToMany(Chat, {
        through: UserChats,
        foreignKey: 'userId',
        as: 'chats',
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE',
    });

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è UserChats
    UserChats.belongsTo(Chat, {
        foreignKey: 'chatId',
        as: 'chat', // üëà –¢–µ–ø–µ—Ä—å `UserChats` –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –æ–Ω —Å–≤—è–∑–∞–Ω —Å `Chat`
    });

    UserChats.belongsTo(User, {
        foreignKey: 'userId',
        as: 'user', // üëà –¢–µ–ø–µ—Ä—å `UserChats` –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –æ–Ω —Å–≤—è–∑–∞–Ω —Å `User`
    });

    Chat.hasMany(UserChats, {
        foreignKey: 'chatId',
        as: 'userChats', // ‚úÖ –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å include –≤ findOne
    });

    User.hasMany(UserChats, {
        foreignKey: 'userId',
        as: 'userChats', // ‚úÖ alias –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —á–∞—Ç–∞–º–∏
    });

    // üîπ –°–≤—è–∑—å "—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    Message.belongsTo(User, {
        foreignKey: 'userId',
        as: 'user',
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE',
    });

    // üîπ –°–≤—è–∑—å "—Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —á–∞—Ç—É"
    Message.belongsTo(Chat, {
        foreignKey: 'chatId',
        as: 'chat',
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE',
    });

    // üîπ –°–≤—è–∑—å "—á–∞—Ç –∏–º–µ–µ—Ç –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π"
    Chat.hasMany(Message, {
        foreignKey: 'chatId',
        as: 'messages',
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE',
    });

    // üîπ –°–≤—è–∑—å "—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–π–ª"
    Message.belongsTo(File, {
        foreignKey: 'fileId',
        as: 'attachment',
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE',
    });

    // üîπ –°–≤—è–∑—å "—Ñ–∞–π–ª –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"
    File.hasOne(Message, {
        foreignKey: 'fileId',
        as: 'message',
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE',
    });
    Chat.hasOne(Session, { foreignKey: "chatId", as: "session" });
    Session.belongsTo(Chat, { foreignKey: "chatId", as: "chat" });

};
