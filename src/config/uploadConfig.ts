import multer, { FileFilterCallback } from "multer";
import path from "path";
import fs from "fs";
import { UserRequest } from "../types/types";

const ensureDirectoryExists = (dir: string) => {
    if (!fs.existsSync(dir)) {
        console.log(`üìÅ –ö–∞—Ç–∞–ª–æ–≥ ${dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º...`);
        fs.mkdirSync(dir, { recursive: true });
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
const getDestination = (fileExtension: string) => {
    const destinations: { [key: string]: string } = {
        jpeg: "uploads/images",
        jpg: "uploads/images",
        png: "uploads/images",
        gif: "uploads/images",
        pdf: "uploads/documents",
        doc: "uploads/documents",
        docx: "uploads/documents",
        txt: "uploads/documents",
        mp4: "uploads/videos",
        avi: "uploads/videos",
        mov: "uploads/videos",
        mp3: "uploads/audio",
        wav: "uploads/audio",
        zip: "uploads/archives",
        rar: "uploads/archives",
    };
    return destinations[fileExtension] || "uploads/others";
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ Multer
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const fileExtension = path.extname(file.originalname).toLowerCase().slice(1);
        const destinationPath = getDestination(fileExtension);

        ensureDirectoryExists(destinationPath);
        cb(null, destinationPath);
    },
    filename: (req, file, cb) => {
        const fileExtension = path.extname(file.originalname).toLowerCase();
        const baseName = path.basename(file.originalname, fileExtension);
        const safeFileName = `${baseName}-${Date.now()}${fileExtension}`;

        cb(null, safeFileName);
    }
});

// –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
const fileFilter = (req: UserRequest, file: Express.Multer.File, cb: FileFilterCallback) => {
    const validTypes = [
        "jpeg", "jpg", "png", "gif",
        "pdf", "doc", "docx", "txt",
        "mp4", "avi", "mov",
        "mp3", "wav",
        "zip", "rar"
    ];

    const extname = path.extname(file.originalname).toLowerCase().slice(1);

    if (validTypes.includes(extname)) {
        cb(null, true);
    } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${extname}`);
        cb(new Error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏ –∞—Ä—Ö–∏–≤—ã."));
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Multer —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
export const upload = multer({
    storage,
    limits: { fileSize: 120 * 1024 * 1024 }, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 120MB
    fileFilter
});

// –ú–∏–¥–ª–≤–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ **–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤**
export const uploadMiddleware = upload.array("files", 10); // –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑

export { ensureDirectoryExists, getDestination };
